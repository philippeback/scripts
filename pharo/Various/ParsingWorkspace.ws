s := '.1.3.6.1.4.1.9.9.13.1.3.1.2.1 = STRING: "NPE Inlet"'.s inspect.oid := ($. asParser, (#digit asParser) plus) plus.(oid flatten parse: s).oidStringType := 'STRING:' asParser.(oidStringType parse: 'STRING:').temperatureType := $" asParser, (#letter asParser / #blank asParser) plus, $" asParser.temperatureType flatten parse: '"NPE Inlet"'.temperatureDescEntry := oid, Character space asParser, $= asParser, Character space asParser, oidStringType, Character space asParser, temperatureType.temperatureDescEntry token parse: s.s:= '.1.3.6.1.4.1.9.9.13.1.3.1.2.1 = STRING: "NPE Inlet".1.3.6.1.4.1.9.9.13.1.3.1.2.2 = STRING: "NPE Outlet".1.3.6.1.4.1.9.9.13.1.3.1.2.3 = STRING: "MP NPE Inlet".1.3.6.1.4.1.9.9.13.1.3.1.2.4 = STRING: "MP NPE".1.3.6.1.4.1.9.9.13.1.3.1.2.5 = STRING: "MP LC Inlet".1.3.6.1.4.1.9.9.13.1.3.1.2.6 = STRING: "MP LC".1.3.6.1.4.1.9.9.13.1.3.1.3.1 = Gauge32: 28.1.3.6.1.4.1.9.9.13.1.3.1.3.2 = Gauge32: 32.1.3.6.1.4.1.9.9.13.1.3.1.3.3 = Gauge32: 25.1.3.6.1.4.1.9.9.13.1.3.1.3.4 = Gauge32: 29.1.3.6.1.4.1.9.9.13.1.3.1.3.5 = Gauge32: 29.1.3.6.1.4.1.9.9.13.1.3.1.3.6 = Gauge32: 30.1.3.6.1.4.1.9.9.13.1.3.1.4.1 = INTEGER: 59.1.3.6.1.4.1.9.9.13.1.3.1.4.2 = INTEGER: 64.1.3.6.1.4.1.9.9.13.1.3.1.4.3 = INTEGER: 59.1.3.6.1.4.1.9.9.13.1.3.1.4.4 = INTEGER: 64.1.3.6.1.4.1.9.9.13.1.3.1.4.5 = INTEGER: 64.1.3.6.1.4.1.9.9.13.1.3.1.4.6 = INTEGER: 64.1.3.6.1.4.1.9.9.13.1.3.1.5.1 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.5.2 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.5.3 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.5.4 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.5.5 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.5.6 = INTEGER: 0.1.3.6.1.4.1.9.9.13.1.3.1.6.1 = INTEGER: 1.1.3.6.1.4.1.9.9.13.1.3.1.6.2 = INTEGER: 1.1.3.6.1.4.1.9.9.13.1.3.1.6.3 = INTEGER: 1.1.3.6.1.4.1.9.9.13.1.3.1.6.4 = INTEGER: 1.1.3.6.1.4.1.9.9.13.1.3.1.6.5 = INTEGER: 1.1.3.6.1.4.1.9.9.13.1.3.1.6.6 = INTEGER: 1'.g := CXTemperaturesGrammar new.parsed := g parse: s.details := Dictionary new.parsed do: [ :each |	| token oidIndex oidTypeKey oidTypeValue oidTypeValueType|		token := (each at: 1) parsedValue.	oidIndex := (token at: 2).		details at: oidIndex ifAbsentPut: [ Dictionary new ].		oidTypeKey := (token at: 1).	oidTypeValue := (token at: 8).	oidTypeValueType := (token at: 6).		(details at: oidIndex) at: oidTypeKey put: { oidTypeValueType. oidTypeValue. } .].details inspect.detail