Object subclass: #X11Drawable	instanceVariableNames: 'display xid'	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Unix-Examples'!!X11Drawable commentStamp: '<historical>' prior: 0!!!X11Drawable methodsFor: 'accessing' stamp: 'mtf 3/14/2011 14:10'!xid	^ xid! !!X11Drawable methodsFor: 'accessing' stamp: 'mtf 3/14/2011 14:11'!xid: anUnsignedInteger	xid := anUnsignedInteger! !!X11Drawable methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:47'!display	^display! !!X11Drawable methodsFor: 'accessing' stamp: 'tbn 5/14/2010 11:27'!display: aDisplay	display := aDisplay! !!X11Drawable methodsFor: 'printing' stamp: 'BG 3/16/2005 08:28'!printOn: aStream	aStream		nextPutAll: self class name;		nextPut: $(;		nextPutAll: self xid printStringHex;		nextPut: $) ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11Drawable class	instanceVariableNames: ''!!X11Drawable class commentStamp: '<historical>' prior: 0!!!X11Drawable class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:18'!fields	"X11Drawable defineFields"	^#( nil 'void*' )! !!X11Drawable class methodsFor: 'instance creation' stamp: 'mtf 3/14/2011 13:20'!none"Universal null resource or null atom"	^ self new! !!X11Drawable class methodsFor: 'instance creation' stamp: 'bf 3/28/2001 16:23'!display: aX11Display	^ self new display: aX11Display! !ExternalStructure subclass: #X11GC	instanceVariableNames: 'drawable'	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Unix-Examples'!!X11GC commentStamp: '<historical>' prior: 0!!!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 14:54'!XSetBackground: xDisplay with: xGC with: bg	<cdecl: void 'XSetBackground' (X11Display* X11GC long) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 14:54'!XSetForeground: xDisplay with: xGC with: fg	<cdecl: void 'XSetForeground' (X11Display* X11GC long) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 16:43'!XDrawLine: xDisplay with: aDrawable with: xGC with: x0 with: y0 with: x1 with: y1	<cdecl: long 'XDrawLine' (X11Display* X11Drawable X11GC long long long long) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 17:08'!XDrawRectangle: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h	<cdecl: void 'XDrawRectangle' (X11Display* X11Drawable X11GC long long ulong ulong) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:09'!XDrawArc: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h with: a1 with: a2	<cdecl: void 'XDrawArc' (X11Display* X11Drawable X11GC long long ulong ulong long long) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:09'!XFillArc: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h with: a1 with: a2	<cdecl: void 'XFillArc' (X11Display* X11Drawable X11GC long long ulong ulong long long) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/28/2000 17:04'!XFreeGC: xDisplay with: xGC	<cdecl: long 'XFreeGC' (X11Display* X11GC) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'xlib calls' stamp: 'ar 1/27/2000 16:56'!XFillRectangle: xDisplay with: xDrawable with: xGC with: x with: y with: w with: h	<cdecl: void 'XFillRectangle' (X11Display* X11Drawable X11GC long long ulong ulong) module: '/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!drawRectangle: aRectangle	self		XDrawRectangle: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:35'!fillRectangle: aRectangle	self		XFillRectangle: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!drawOval: aRectangle	self		XDrawArc: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height			with: 0			with: 64*360! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:32'!drawLineFrom: pt1 to: pt2	self XDrawLine: self display 			with: drawable 			with: self 			with: pt1 x 			with: pt1 y 			with: pt2 x 			with: pt2 y! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!background: pixelValue	self XSetBackground: self display with: self with: pixelValue! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!fillOval: aRectangle	self		XFillArc: self display			with: drawable			with: self			with: aRectangle left			with: aRectangle top			with: aRectangle width			with: aRectangle height			with: 0			with: 64*360! !!X11GC methodsFor: 'drawing' stamp: 'ar 1/28/2000 17:34'!foreground: pixelValue	self XSetForeground: self display with: self with: pixelValue! !!X11GC methodsFor: 'accessing' stamp: 'ar 1/27/2000 13:01'!drawable	^drawable! !!X11GC methodsFor: 'accessing' stamp: 'tbn 5/14/2010 11:27'!drawable: aDrawable	drawable := aDrawable! !!X11GC methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:49'!display	^drawable display! !!X11GC methodsFor: 'initialize-release' stamp: 'tbn 5/14/2010 11:28'!free	handle == nil ifFalse:[		self XFreeGC: self display with: self.		handle := nil.	].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11GC class	instanceVariableNames: ''!!X11GC class commentStamp: '<historical>' prior: 0!!!X11GC class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:18'!fields	"X11GC defineFields"	^#( nil 'void*' )! !!X11GC class methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:07'!XCreateGC: xDisplay with: aDrawable with: valueMask with: values	<cdecl: X11GC 'XCreateGC' (X11Display* X11Drawable ulong long*) module: '/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11GC class methodsFor: 'instance creation' stamp: 'tbn 5/14/2010 11:27'!on: aDrawable	| xgc |	xgc := self XCreateGC: aDrawable display with: aDrawable with: 0 with: nil.	xgc drawable: aDrawable.	^xgc! !X11Drawable subclass: #X11Window	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Unix-Examples'!!X11Window commentStamp: '<historical>' prior: 0!!ExternalStructure subclass: #X11Display	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'FFI-Unix-Examples'!!X11Display commentStamp: '<historical>' prior: 0!!!X11Display methodsFor: 'initialize-release' stamp: 'ar 1/27/2000 17:51'!sync	^self XSync: self! !!X11Display methodsFor: 'initialize-release' stamp: 'tbn 5/14/2010 11:20'!closeDisplay	handle == nil ifFalse:[		self XCloseDisplay: self.		handle := nil].! !!X11Display methodsFor: 'initialize-release' stamp: 'ar 1/27/2000 17:45'!flush	self XFlush: self! !!X11Display methodsFor: 'xlib calls' stamp: 'mtf 3/14/2011 13:31'!None	^ 0! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XQueryPointer: display window: w returnRoot: root child: child rootX: rootX rootY: rootY winX: winX winY: winY mask: mask 	<cdecl: bool 'XQueryPointer' (X11Display* ulong ulong* ulong* long* long* long* long* long*) module: '/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XSync: xDisplay	<cdecl: void 'XSync' (X11Display*) module:'/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XDisplayString: aDisplay	<cdecl: char* 'XDisplayString' (X11Display*) module:'/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XWarpPointer: display sourceWindow: srcWindowID destWindow: destWindowID sourceX: srcX sourceY: srcY sourceWidth: srcWidth sourceHeight: srcHeight destX: destX destY: destY	<cdecl: bool 'XWarpPointer' (X11Display* ulong ulong long long ulong ulong long long) module: '/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XCloseDisplay: aDisplay	<cdecl: void 'XCloseDisplay' (X11Display*) module:'/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XFlush: xDisplay	<cdecl: void 'XFlush' (X11Display*) module:'/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'xlib calls' stamp: 'PhilippeBack 9/22/2014 18:14'!XGetInputFocus: display with: focus with: revert	<cdecl: void 'XGetInputFocus' (X11Display* ulong* long*) module: '/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display methodsFor: 'accessing' stamp: 'ar 1/27/2000 16:46'!displayString	^self XDisplayString: self! !!X11Display methodsFor: 'accessing' stamp: 'mtf 3/14/2011 13:31'!warpPointerFrom: aRectangle in: sourceWindow To: aPoint in: destWindow"Moves the mouse pointer to aPoint relative to the top-left corner of a window"	^ self XWarpPointer: self		sourceWindow: sourceWindow xid		destWindow: destWindow xid		sourceX: aRectangle left sourceY: aRectangle top			sourceWidth: aRectangle width sourceHeight: aRectangle height		destX: aPoint x destY: aPoint y! !!X11Display methodsFor: 'accessing' stamp: 'mtf 3/14/2011 13:32'!warpPointerTo: aPoint in: aWindow"Moves the mouse pointer to aPoint relative to the top-left corner of a window"	^ self XWarpPointer: self		sourceWindow: self None		destWindow: aWindow xid		sourceX: 0 sourceY: 0 sourceWidth: 0 sourceHeight: 0		destX: aPoint x destY: aPoint y! !!X11Display methodsFor: 'accessing' stamp: 'mtf 3/14/2011 14:12'!getInputFocus	| focus revert |	focus := WordArray new: 1.	revert := WordArray new: 1.	self XGetInputFocus: self with: focus with: revert.	^ X11Window new xid: focus first! !!X11Display methodsFor: 'accessing' stamp: 'tbn 5/14/2010 11:20'!ourWindow	"Guess the window to draw on."	| window ptr child |	window := self getInputFocus.	ptr := self queryPointer: window.	 "{root. child. root pos. win pos. mask}"	child := ptr second.	child xid = 0 ifTrue: [^ window].	^ child! !!X11Display methodsFor: 'accessing' stamp: 'mtf 3/14/2011 15:15'!queryPointer: aX11Window	| root child rootX rootY winX winY mask |	root := WordArray new: 1.	child := WordArray new: 1.	rootX := WordArray new: 1.	rootY := WordArray new: 1.	winX := WordArray new: 1.	winY := WordArray new: 1.	mask := WordArray new: 1.	self XQueryPointer: self window: aX11Window xid returnRoot: root child: child		rootX: rootX rootY: rootY winX: winX winY: winY mask: mask.	^{		X11Window new xid: root first.		X11Window new xid: child first.		rootX first @ rootY first.		winX first @ winY first.		mask first}! !!X11Display methodsFor: 'accessing' stamp: 'mtf 3/14/2011 13:31'!warpPointerBy: aPoint"Moves the mouse pointer from its current location to its current location + aPoint. Generates a mouse move event if the squeak window is active"	^ self XWarpPointer: self		sourceWindow: self None		destWindow: self None		sourceX: 0 sourceY: 0 sourceWidth: 0 sourceHeight: 0		destX: aPoint x destY: aPoint y! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!X11Display class	instanceVariableNames: ''!!X11Display class commentStamp: '<historical>' prior: 0!!!X11Display class methodsFor: 'field definition' stamp: 'ar 1/28/2000 19:08'!fields	"X11Display defineFields"	"Note: The structure of Display is internal and only pointers to X11Display are used"	^#()! !!X11Display class methodsFor: 'examples' stamp: 'tbn 5/14/2010 11:19'!coloredEllipses	"X11Display coloredEllipses"	| display window gc colors rnd w h pt1 pt2 r |	display := X11Display XOpenDisplay: nil.	window := display ourWindow.	gc := X11GC on: window.	colors := Color colorNames collect:[:n| (Color perform: n) pixelWordForDepth: 32].	rnd := Random new.	w := Display width.	h := Display height.	[Sensor anyButtonPressed] whileFalse:[		pt1 := (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 := (rnd next * w) asInteger @ (rnd next * h) asInteger.		r := Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillOval: r.		gc foreground: 0.		gc drawOval: r.		display sync.	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'tbn 5/14/2010 11:18'!x11Draw	"X11Display x11Draw"	| display window gc nextPt lastPt ptr |	display := X11Display XOpenDisplay: nil.	window = display ourWindow.	gc := X11GC on: window.	gc foreground: 0.	lastPt := nil.	[ptr := display queryPointer: window.	"{root. child. root pos. win pos. mask}"	ptr last anyMask: 256] whileFalse:[		nextPt := ptr fourth.		nextPt = lastPt ifFalse:[			lastPt ifNotNil: [				gc drawLineFrom: lastPt to: nextPt.				display sync].			lastPt := nextPt].	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'examples' stamp: 'tbn 5/14/2010 11:26'!coloredRectangles	"X11Display coloredRectangles"	| display window gc colors rnd w h pt1 pt2 r nPixels time n |	display := X11Display XOpenDisplay: nil.	window := display ourWindow.	gc := X11GC on: window.	colors := Color colorNames collect:[:cn| (Color perform: cn) pixelWordForDepth: 32].	rnd := Random new.	w := Display width.	h := Display height.	n := 0.	nPixels := 0.	time := Time millisecondClockValue.	[Sensor anyButtonPressed] whileFalse:[		pt1 := (rnd next * w) asInteger @ (rnd next * h) asInteger.		pt2 := (rnd next * w) asInteger @ (rnd next * h) asInteger.		r := Rectangle encompassing: (Array with: pt1 with: pt2).		gc foreground: colors atRandom.		gc fillRectangle: r.		gc foreground: 0.		gc drawRectangle: r.		display sync.		n := n + 1.		nPixels := nPixels + ((r right - r left) * (r bottom - r top)).		(n \\ 100) = 0 ifTrue:[			'Pixel fillRate: ', (nPixels * 1000 // (Time millisecondClockValue - time))				asStringWithCommas displayAt: 0@0].	].	gc free.	display closeDisplay.	Display forceToScreen.! !!X11Display class methodsFor: 'instance creation' stamp: 'PhilippeBack 9/22/2014 18:06'!XOpenDisplay: displayName	"X11Display XOpenDisplay: nil"	<cdecl: X11Display* 'XOpenDisplay' (char*) module:'/usr/lib/libX11.so.6'>	^self externalCallFailed! !!X11Display class methodsFor: 'instance creation' stamp: 'mtf 3/14/2011 14:02'!on: aStringOrNil	^ self XOpenDisplay: aStringOrNil! !!X11Display class methodsFor: 'instance creation' stamp: 'mtf 3/14/2011 14:03'!new	^ self on: nil! !X11GC compileFields!X11Display compileFields!